@property --cell-size {
  syntax: '<length>';
  inherits: true;
  initial-value: 5vmin;
}
@property --city-width {
  syntax: '<number>';
  inherits: false;
  initial-value: 1;
}
@property --city-height {
  syntax: '<number>';
  inherits: false;
  initial-value: 1;
}
@property --mark-grid-cols {
  syntax: '<number>';
  inherits: true;
}
@property --mark-grid-rows {
  syntax: '<number>';
  inherits: true;
}

*,
::before,
::after {
  box-sizing: border-box;
}

:root {
  font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue',
    sans-serif;
}

body {
  margin: 0;
  --cell-size: 5vmin;
}

section {
  display: grid;
  grid-template-columns: auto auto auto;
  justify-content: center;
  line-height: var(--cell-size);
  text-align: center;
  font-size: calc(var(--cell-size) / 2);
  margin: 1em;
}
.hints {
  background-color: #def;
  display: flex;
}
.top {
  grid-area: 1 / 2 / 2 / 3;
  height: var(--cell-size);
}
.right {
  grid-area: 2 / 3 / 3 / 4;
  width: var(--cell-size);
  flex-direction: column;
}
.bottom {
  grid-area: 3 / 2 / 4 / 3;
  height: var(--cell-size);
  flex-direction: row-reverse;
}
.left {
  grid-area: 2 / 1 / 3 / 2;
  width: var(--cell-size);
  flex-direction: column-reverse;
}

.city {
  display: grid;
  grid-area: 2 / 2 / 3 / 3;
  width: calc(var(--cell-size) * var(--city-width, 1));
  height: calc(var(--cell-size) * var(--city-height, 1));
  grid-template-columns: repeat(var(--city-width), minmax(0, var(--cell-size)));
  background-color: white;
}

.cell {
  width: var(--cell-size);
  height: var(--cell-size);
  border: 1px solid;
  border-width: max(1px, 0.05em);
  display: grid;
  grid-template-columns: repeat(var(--mark-grid-cols), 1fr);
  grid-template-rows: repeat(var(--mark-grid-rows), 1fr);
}
.error {
  color: red;
}
.city > .cell:hover {
  background-color: khaki;
}
.value[contenteditable='true'] {
  border-color: lightcoral;
  box-shadow: 0 0 0 calc(var(--cell-size) / 15) lightcoral;
  position: relative;
}

.value {
  grid-area: 1 / 1 / span var(--mark-grid-rows) / span var(--mark-grid-cols);
}
.mark {
  display: none;
  pointer-events: none;
  font-size: calc(1em / var(--mark-grid-rows));
  line-height: calc(var(--cell-size) / var(--mark-grid-rows));
}
.mark::before {
  content: attr(data-value);
}
.value:empty ~ .mark {
  display: block;
}

.errors {
  display: none;
  position: absolute;
  left: 0;
  right: 0;
  transform: translate(0, -100%);
  font-size: 75%;
  background: red;
  color: white;
  margin-block-start: -0.5em;
}

aside {
  font-size: calc(var(--cell-size) / 2);
  display: flex;
  justify-content: center;
  margin: 1em;
}

aside button {
  border: 1px solid;
  border-width: max(1px, 0.05em);
  border-radius: 50%;
  padding: 0;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: var(--cell-size);
  height: var(--cell-size);
  font-size: inherit;
  font-weight: inherit;
}

.input,
.mode {
  background: gainsboro;
  font-weight: bold;
}
[data-input-mode='mixed'] .input::before {
  content: 'âŒ¨\0A\A0\A0\A0ðŸ–±';
  font-size: 80%;
  white-space: pre;
  line-height: 0.8em;
}
[data-input-mode='pointer'] .input::before {
  content: 'ðŸ‘†';
}
[data-input-mode='keyboard'] .input::before {
  content: 'âŒ¨';
}
[data-game-mode='mark'] .mode::before {
  content: '1\A0 2\0A 3\A0 4';
  font-size: 60%;
  white-space: pre;
}
[data-game-mode='enter'] .mode::before {
  content: '#';
}

.selectors {
  display: flex;
}
.selectors > button {
  background: khaki;
}

/* @media (prefers-color-scheme: dark) {
  body {
    background-color: #222;
    filter: invert(1);
  }
} */
